<?xml version="1.0"?>
<doc>
    <assembly>
        <name>napredne-projekat</name>
    </assembly>
    <members>
        <member name="T:napredne_projekat.Controllers.DepartmentController">
            <summary>
            Klasa koja nam sluzi za definisanje http metoda i endpoint-a za Department
            </summary>
        </member>
        <member name="M:napredne_projekat.Controllers.DepartmentController.#ctor(napredne_projekat.Services.DepartmentService)">
            <summary>
            Parametrizovani konstruktor koji postavlja vrednost za departmentService
            </summary>
            <param name="departmentService">Objekat klase DepartmentService</param>
        </member>
        <member name="M:napredne_projekat.Controllers.DepartmentController.GetAll">
            <summary>
            Metoda koja prima GET zahtev i vraca sve katedre
            </summary>
            <returns>OkObjectResult sa statusom 200 i listom svih katedri</returns>
        </member>
        <member name="M:napredne_projekat.Controllers.DepartmentController.AddDepartment(napredne_projekat.Domain.Department)">
            <summary>
            Metoda koja prima POST zahtev i dodaje prosledjen objekat u bazu
            </summary>
            <param name="item">Objekat klase Department, prosledjen iz tela Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da doda katedru u bazu</item>
            <item>OkObjectResult sa dodatom katedrom ukoliko uspre da doda katedru u bazu</item>
            </list></returns>
        </member>
        <member name="M:napredne_projekat.Controllers.DepartmentController.UpdateDepartment(System.Int32,napredne_projekat.Domain.Department)">
            <summary>
            Metoda koja prima PUT zahtev i update-uje katedru sa prosledjenim id-jem sa novim prosledjenim podacima
            </summary>
            <param name="id">Id katedre koja treba da se update-uje kao Int, prosledjen iz rute Http zahteva</param>
            <param name="item">Objekat klase Department koji sadrzi promenjene podatke, prosledjen iz tela Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da update-uje katedru u bazi</item>
            <item>OkObjectResult sa novom update-ovanom katedrom ukoliko uspe da update-uje katedru u bazi</item>
            </list></returns>
        </member>
        <member name="M:napredne_projekat.Controllers.DepartmentController.DeleteDepartment(System.Int32)">
            <summary>
            Metoda koja prima DELETE zahtev i brise katedru sa prosledjenim id-jem
            </summary>
            <param name="id">Id katedre koja treba da se izbrise kao Int, prosledjen iz rute Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da izbrise katedru iz baze</item>
            <item>OkObjectResult ukoliko uspe da izbrise katedru iz baze</item>
            </list></returns>
        </member>
        <member name="M:napredne_projekat.Controllers.DepartmentController.FindDepartmentById(System.Int32)">
            <summary>
            Metoda koja prima GET zahtev i vraca katedru sa prosledjenim id-jem
            </summary>
            <param name="id">Id katedre koja treba da se vrati kao Int, prosledjen iz rute Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da vrati katedru iz baze</item>
            <item>OkObjectResult sa katedrom ukoliko uspe da vrati katedru iz baze</item>
            </list></returns>
        </member>
        <member name="T:napredne_projekat.Controllers.StudentController">
            <summary>
            Klasa koja nam sluzi za definisanje http metoda i endpoint-a za Studenta
            </summary>
        </member>
        <member name="M:napredne_projekat.Controllers.StudentController.#ctor(napredne_projekat.Services.StudentService)">
            <summary>
            Parametrizovani konstruktor koji kreira objekat klase Student i postavlja vrednost za studentService
            </summary>
            <param name="studentService">Objekat klase StudentService</param>
        </member>
        <member name="M:napredne_projekat.Controllers.StudentController.GetAll">
            <summary>
            Metoda koja prima GET zahtev i vraca listu svih studenata
            </summary>
            <returns>OkObjectResult sa listom svih studenata</returns>
        </member>
        <member name="M:napredne_projekat.Controllers.StudentController.AddStudent(napredne_projekat.Domain.Student)">
            <summary>
            Metoda koja prima POST zahtev i ubacuje prosledjenog studenta u bazu
            </summary>
            <param name="item">Objekat klase student koji treba da bude ubacen u bazu, iz tela Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da doda studenta u bazu</item>
            <item>OkObjectResult sa dodatim studentom ako uspe da ga doda u bazu</item>
            </list></returns>
        </member>
        <member name="M:napredne_projekat.Controllers.StudentController.FindStudentById(System.Int32)">
            <summary>
            Metoda koja prima GET zahtev i vraca studenta sa prosledjenim id-jem
            </summary>
            <param name="id">Id studenta koji treba da bude vracen, prosledjen iz Http zahteva</param>
            <returns>OkObjecrResult sa studentom koji ima prosledjen id</returns>
        </member>
        <member name="M:napredne_projekat.Controllers.StudentController.GetStudentsByGrade(System.Int32)">
            <summary>
            Metoda koja prima GET zahtev i vraca sve studente sa ocenom vecom od prosledjene
            </summary>
            <param name="grade">Ocena kao Int, prosledjena iz rute Http zahteva</param>
            <returns>OkObjectResult sa listom studetna koji imaju ocenu vecu od prosledjene</returns>
        </member>
        <member name="T:napredne_projekat.Controllers.SubjectController">
            <summary>
            Klasa koja nam sluzi za definisanje Http metoda i endpoint-a za predmet
            </summary>
        </member>
        <member name="M:napredne_projekat.Controllers.SubjectController.#ctor(napredne_projekat.Services.SubjectService)">
            <summary>
            Parametrizovani konstruktor koji kreira objekat klase SubjecController i postavlja vrednost za subjectService
            </summary>
            <param name="subjectService">Objekat klase SubjectService</param>
        </member>
        <member name="M:napredne_projekat.Controllers.SubjectController.GetAll">
            <summary>
            Metoda koja prima GET zahtev i vraca listu svih predmeta
            </summary>
            <returns>OkObjectResult sa listom svih predmeta</returns>
        </member>
        <member name="M:napredne_projekat.Controllers.SubjectController.AddSubject(napredne_projekat.Domain.Subject)">
            <summary>
            Metoda koja prima POST zahtev i ubacuje novi predmet u bazu
            </summary>
            <param name="item">Objekat klase Subject, prosledjen iz tela Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da ubaci predmet u bazu</item>
            <item>OkObjectResutl sa ubacenim predmetom ako uspe da ubaci predmet u bazu</item>
            </list></returns>
        </member>
        <member name="M:napredne_projekat.Controllers.SubjectController.UpdateSubject(System.Int32,napredne_projekat.Domain.Subject)">
            <summary>
            Metoda koja prima PUT zahtev u update-uje predmet sa prosledjenim id-jem
            </summary>
            <param name="id">Id predmeta koji treba da se updat-uje kao Int, prosledjen iz rute Http zahteva</param>
            <param name="item">Objekat klase Subject sa novim podacima predmeta, prosledjen iz tela Http zahteva</param>
            <returns><list type="bullet">
            <item>BadRequestObjectResult sa porukom ako ne uspe da update-uje predmet u bazi</item>
            <item>OkObjectResutl sa update-ovanim predmetom ako uspe da update-uje predmet u bazi</item>
            </list></returns>
        </member>
        <member name="M:napredne_projekat.Controllers.SubjectController.GetById(System.Int32)">
            <summary>
            Metoda koja prima GET zahtev i vraca predmet sa datim Id-jem
            </summary>
            <param name="id">Id predmeta koji treba da se vrati kao Int, prosledjen iz rute Http zahteva</param>
            <returns>OkObjectResult sa predmetom koji ima id koji je prosledjen</returns>
        </member>
        <member name="T:napredne_projekat.Domain.Department">
            <summary>
            Domenska klasa koja predstavlja katedru
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Department.DepartmentId">
            <summary>
            Id katedre
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Department.Name">
            <summary>
            Naziv katedre
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Department.Size">
            <summary>
            Velicina katedre, odosno broj ljudi na katedri
            </summary>
        </member>
        <member name="T:napredne_projekat.Domain.Enrollment">
            <summary>
            Domesnka klasa koja predstavlja pohadjanja, odnosno agregaciju izmedju klasa Student i Subject
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Enrollment.StudentId">
            <summary>
            Id studenta koji je vezan za ovo pohadjanje
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Enrollment.Student">
            <summary>
            Student koji je vezan za ovo pohadjanje
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Enrollment.SubjectId">
            <summary>
            Id premmeta koji je vezan za ovo pohadjanje
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Enrollment.Subject">
            <summary>
            Predmet koji je vezan za ovo pohadjanje
            </summary>
        </member>
        <member name="T:napredne_projekat.Domain.NaprednoContext">
            <summary>
            Context klasa koja nam sluzi da preko EntityFramework-a povezemo domenske klase sa bazom
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.NaprednoContext.Students">
            <summary>
            Posredna klasa studenata
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.NaprednoContext.Subjects">
            <summary>
            Posredna klasa predmeta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.NaprednoContext.Departments">
            <summary>
            Posredna klasa katedri
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.NaprednoContext.Enrollments">
            <summary>
            Posredna klasa pohadjanja
            </summary>
        </member>
        <member name="M:napredne_projekat.Domain.NaprednoContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:napredne_projekat.Domain.NaprednoContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:napredne_projekat.Domain.NaprednoContext.#ctor">
            <summary>
            Bezparametraski konstruktor za kreiranje objekta
            </summary>
        </member>
        <member name="M:napredne_projekat.Domain.NaprednoContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Parametraski konstrukotor koji kreira objekat i postavlja pocetne opcije
            </summary>
            <param name="options">Opcije za kreiranje contexta</param>
        </member>
        <member name="T:napredne_projekat.Domain.Student">
            <summary>
            Domenska klasa koja predstavlja studenta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.StudentId">
            <summary>
            Id studenta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.FirstName">
            <summary>
            Ime studetna
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.LastName">
            <summary>
            Prezime studenta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.Index">
            <summary>
            Broj indeksa datog studenta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.Grade">
            <summary>
            Prosecna ocena studenta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.DateOfBirth">
            <summary>
            Datum rodjenja studetna
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Student.Subjects">
            <summary>
            Lista predmeta koje student pohadja
            </summary>
        </member>
        <member name="T:napredne_projekat.Domain.Subject">
            <summary>
            Domenska klasa koja predstavlja predmet
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Subject.SubjectId">
            <summary>
            Properti koji predstavlja id predmeta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Subject.Name">
            <summary>
            Properti koji predstavlja naziv predmeta
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Subject.ESPB">
            <summary>
            Properti koji predstavlja koliko espb nosi predmet
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Subject.DepartmentId">
            <summary>
            Properti koji predstavlja id katedre kojoj predmet pripada
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Subject.Department">
            <summary>
            Katedra kojoj predmet pripada
            </summary>
        </member>
        <member name="P:napredne_projekat.Domain.Subject.Students">
            <summary>
            Lista studenata koji pohadjaju ovaj predmet
            </summary>
        </member>
        <member name="T:napredne_projekat.Exeptions.cs.AlreadyExistsException">
            <summary>
            Klasa koja nasledjuje klasu Exception i predstavlja Exception kada neki objekat vec postoji
            </summary>
        </member>
        <member name="M:napredne_projekat.Exeptions.cs.AlreadyExistsException.#ctor">
            <summary>
            Bezparmatraski konstruktor koji kreira objekat klase AlreadyExistsException
            </summary>
        </member>
        <member name="T:napredne_projekat.Exeptions.cs.IdException">
            <summary>
            Klasa koja nasledjuje klasu Exception, i predstavlja Exception kada se unese nevalidan Id
            </summary>
        </member>
        <member name="M:napredne_projekat.Exeptions.cs.IdException.#ctor">
            <summary>
            Bezparmatraski konstruktor koji kreira objekat klase IdException
            </summary>
        </member>
        <member name="M:napredne_projekat.Exeptions.cs.IdException.#ctor(System.String)">
            <summary>
            Parametraski konstruktor koji kreira objekat klase IdException i postavlja vrednost za message
            </summary>
            <param name="message">Poruka exceptiona kao String</param>
        </member>
        <member name="T:napredne_projekat.Program">
            <summary>
            Klasa u kojoj se nalaze metode za pokretanje aplikacije
            </summary>
        </member>
        <member name="M:napredne_projekat.Program.Main(System.String[])">
            <summary>
            Main metoda za pokretanje aplikacije
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:napredne_projekat.Program.CreateHostBuilder(System.String[])">
            <summary>
            Metoda u kojoj konfigurisemo nase servis i nacin na koji se pokrece
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:napredne_projekat.Repository.IRepository`1">
            <summary>
            Interfejs u kom odredjujemo osnovne operacije koje mora da ima svaki Repositoty
            </summary>
            <remarks>The remarks</remarks>
            <typeparam name="T">Tip domenske klase sa kojom radi repozitori</typeparam>
        </member>
        <member name="M:napredne_projekat.Repository.IRepository`1.FindById(System.Int32)">
            <summary>
            Metoda koja nam vraca jedan entity iz tabele na osonvu id kojeg smo prosledili
            </summary>
            <param name="id">Id entity-a kojeg zelimo da vratimo iz baze</param>
        </member>
        <member name="M:napredne_projekat.Repository.IRepository`1.GetAll">
            <summary>
            Metoda koja nam vraca listu svih entity-a iz tabele
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.IRepository`1.Add(`0)">
            <summary>
            Metoda koja dodaje entity u tabelu
            </summary>
            <param name="item">Entity klase T</param>
        </member>
        <member name="M:napredne_projekat.Repository.IRepository`1.Update(`0,System.Int32)">
            <summary>
            Metoda koja update-uje onaj entity u tableli koji ima id koji smo proseldili
            </summary>
            <param name="item">Entity klase T</param>
            <param name="id">Id entity-a kojeg zelimo da updatetujemo</param>
        </member>
        <member name="M:napredne_projekat.Repository.IRepository`1.Delete(System.Int32)">
            <summary>
            Metoda koja brise iz tabele entity ciji smo id prosledili
            </summary>
            <param name="id">Id entity-a kojeg zelimo da izbrisiemo</param>
        </member>
        <member name="T:napredne_projekat.Repository.IRepositoryDepartment">
            <summary>
            Interfejs koji odredjuje sve operacije za manipulaciju katedrama u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.IRepositoryDepartment.FindOne(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Department,System.Boolean}})">
            <summary>
            Metoda koja vraca jedan entity iz tabele na osnovu uslova koji smo zadali
            </summary>
            <param name="expression">Lambda izraz koji prosledjujemo kao uslov koji mora da se ispuni</param>
        </member>
        <member name="T:napredne_projekat.Repository.IRepositoryStudent">
            <summary>
            Interfejs koji odredjuje sve operacije za manipulaciju studentima u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.IRepositoryStudent.GetStudentsByGrade(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Student,System.Boolean}})">
            <summary>
            Metoda koja prima lambda izraz kao uslov i vraca listu studenata koji zadovoljavaju taj uslov
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:napredne_projekat.Repository.IRepositoryStudent.GetStudentByIndex(System.String)">
            <summary>
            Metoda koja prima index i vraca studenta sa tim index-om
            </summary>
            <param name="index">Index studenta kao String</param>
        </member>
        <member name="T:napredne_projekat.Repository.IRepositorySubject">
            <summary>
            Interfejs koji odredjuje sve operacije za manipulaciju predmetim u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.IRepositorySubject.FindOne(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Subject,System.Boolean}})">
            <summary>
            Metoda koja prima lambda izraz kao uslov i vraca predmet koji zadovoljava taj uslov
            </summary>
            <param name="func">Uslov kao lambda izraz</param>
        </member>
        <member name="T:napredne_projekat.Repository.repo_impl.RepositoryDepartment">
            <summary>
            Klasa u kojoj su implementirane sve opercije za manipulaciju katedrama u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.#ctor(napredne_projekat.Domain.NaprednoContext)">
            <summary>
            Parametrizovani konstruktor koji kreira objekat klase RepositoryDepartment i postavlja vrednost za context
            </summary>
            <param name="context">Objekat klase NaprenoContext</param>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.Add(napredne_projekat.Domain.Department)">
            <inheritdoc/>
            <returns>Objekat klase Department koji je dodat u bazu</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.Delete(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.FindById(System.Int32)">
            <inheritdoc />
            <returns>Objekat klase Department sa datim id-jem</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.FindOne(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Department,System.Boolean}})">
            <inheritdoc />
            <returns>Objekat klase Department koji zadovoljava uslov</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.GetAll">
            <inheritdoc />
            <returns>Lista svih katedri</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryDepartment.Update(napredne_projekat.Domain.Department,System.Int32)">
            <inheritdoc />
            <returns>Objekat klase Department koji je update-ovan</returns>
        </member>
        <member name="T:napredne_projekat.Repository.repo_impl.RepositoryStudent">
            <summary>
            Klasa u kojoj su implementirane sve opercije za manipulaciju studentima u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.#ctor(napredne_projekat.Domain.NaprednoContext)">
            <summary>
            Parametrizovani konstruktor koji kreira objekat klase RepositoryStudent i postavlja vrednost za context
            </summary>
            <param name="context">Objekat klase NaprenoContext</param>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.Add(napredne_projekat.Domain.Student)">
            <inheritdoc/>
            <returns>Objekat klase Student koji je dodat</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.Delete(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.FindById(System.Int32)">
            <inheritdoc/>
            <returns>Objekat klase Student koji ima prosledjen id</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.GetAll">
            <inheritdoc/>
            <returns>Listu svih studenata</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.GetStudentByIndex(System.String)">
            <inheritdoc/>
            <returns>Objekat klase student koji ima prosledjen index</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.GetStudentsByGrade(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Student,System.Boolean}})">
            <inheritdoc/>
            <returns>Listu studenta koji zadovoljavaju uslov za ocene</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositoryStudent.Update(napredne_projekat.Domain.Student,System.Int32)">
            <inheritdoc/>
            <returns>Objekat klase Student koji je update-ovan</returns>
        </member>
        <member name="T:napredne_projekat.Repository.repo_impl.RepositorySubject">
            <summary>
            Klasa u kojoj su implementirane sve opercije za manipulaciju predmetima u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.#ctor(napredne_projekat.Domain.NaprednoContext)">
            <summary>
            Parametrizovani konstruktor koji kreira objekat klase RepositorySubject i postavlja vrednost za context
            </summary>
            <param name="context">Objekat klase NaprenoContext</param>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.Add(napredne_projekat.Domain.Subject)">
            <inheritdoc/>
            <returns>Objekat klase Subject koji je dodat u bazu</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.Delete(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.FindById(System.Int32)">
            <inheritdoc/>
            <returns>Objekat klase Subject koji ima dati id</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.FindOne(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Subject,System.Boolean}})">
            <inheritdoc/>
            <returns>Objekat klase Subject koji zadovoljava uslov</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.GetAll">
            <inheritdoc/>
            <returns>Listu objekata klase Subject koja predstavlja listu svih predmeta</returns>
        </member>
        <member name="M:napredne_projekat.Repository.repo_impl.RepositorySubject.Update(napredne_projekat.Domain.Subject,System.Int32)">
            <inheritdoc/>
            <returns>Objekat klase Subject koji je update-ovan</returns>
        </member>
        <member name="T:napredne_projekat.Repository.unit_of_work.IUnitOfWork">
            <summary>
            Interfejs koji nam sluzi da objedimo sve repository-je i omogucava da se sve obavlja pod jednom transakcijom
            </summary>
        </member>
        <member name="P:napredne_projekat.Repository.unit_of_work.IUnitOfWork.Departments">
            <summary>
            Property koji nam sluzi za pristup metodama klase RepositroyDepartment
            </summary>
        </member>
        <member name="P:napredne_projekat.Repository.unit_of_work.IUnitOfWork.Students">
            <summary>
            Property koji nam sluzi za pristup metodama klase RepositoryStudent
            </summary>
        </member>
        <member name="P:napredne_projekat.Repository.unit_of_work.IUnitOfWork.Subjects">
            <summary>
            Property koji nam sluzi za pristup metodama klase RepositorySubject
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.unit_of_work.IUnitOfWork.Commit">
            <summary>
            Metoda koja sluzi za cuvanje izmena koje su izvresne pod transakcijom
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.unit_of_work.IUnitOfWork.Dispose">
            <summary>
            Metoda za prekid rada nad bazom
            </summary>
        </member>
        <member name="T:napredne_projekat.Repository.unit_of_work.UnitOfWork">
            <summary>
            Klasa koja nasledjuje interfejs IUnitOfWork i koja nam sluzi da objedimo sve repository-je i omogucava da se sve obavlja pod jednom transakcijom
            </summary>
        </member>
        <member name="M:napredne_projekat.Repository.unit_of_work.UnitOfWork.#ctor(napredne_projekat.Domain.NaprednoContext)">
            <summary>
            Parametraki konstruktor koji kreira objekat klase UnitOfWork i postavlja vrednosti za context, Departments, Students i Subjects
            </summary>
            <param name="context">Objekat klase NaprednoContext</param>
        </member>
        <member name="P:napredne_projekat.Repository.unit_of_work.UnitOfWork.Departments">
            <inheritdoc/>
        </member>
        <member name="P:napredne_projekat.Repository.unit_of_work.UnitOfWork.Students">
            <inheritdoc/>
        </member>
        <member name="P:napredne_projekat.Repository.unit_of_work.UnitOfWork.Subjects">
            <inheritdoc/>
        </member>
        <member name="M:napredne_projekat.Repository.unit_of_work.UnitOfWork.Commit">
            <inheritdoc/>
        </member>
        <member name="M:napredne_projekat.Repository.unit_of_work.UnitOfWork.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:napredne_projekat.Services.DepartmentService">
            <summary>
            Klasa koja nam sluzi za kao serivis iz koga se pozivaju operacije nad tabelom departmetnts u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.#ctor(napredne_projekat.Repository.unit_of_work.IUnitOfWork)">
            <summary>
            Parametrizovani konstrukor koji kreira objekat klase DepartmentService i postavlja vrednost za uow
            </summary>
            <param name="uow">Objekat klase UnitOfWork</param>
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.GetAll">
            <summary>
            Metoda koja poziva UnitOfWork i vraca listu svih katedri
            </summary>
            <returns>Lista svih katedri</returns>
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.Add(napredne_projekat.Domain.Department)">
            <summary>
            Metoda koja poziva UnitOfWork da doda katedru  i vraca tu katedru
            </summary>
            <param name="item">Objekat klase Department</param>
            <returns>Objekat klase Department koji je dodat</returns>
            <exception cref="T:napredne_projekat.Exeptions.cs.AlreadyExistsException" />
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.FindById(System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork i vraca katedru za prosledjenim id-jem
            </summary>
            <param name="id">Id katedre kao Int</param>
            <returns>Objekat klase Department koji ima dati id</returns>
            <exception cref="T:napredne_projekat.Exeptions.cs.IdException" />
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.Update(napredne_projekat.Domain.Department,System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork da update-uje katedru sa prosledjenim id-jem i vraca tu katedru
            </summary>
            <param name="item">Objekat klase Department sa novim podacima</param>
            <param name="id">Id katedre koja treba da se update-uje kao Int</param>
            <returns>Objekat klase Department koji je update-ovan</returns>
            <exception cref="T:napredne_projekat.Exeptions.cs.IdException" />
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.Delete(System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork da izbrise katedru sa datim id-jem
            </summary>
            <param name="id">Id katedre koja treba da se obrise kao Int</param>
            <exception cref="T:napredne_projekat.Exeptions.cs.IdException" />
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.ToJson(napredne_projekat.Domain.Department)">
            <summary>
            Metoda koja vraca objekat u json formatu
            </summary>
            <param name="department">Objekat tipa Department</param>
            <returns>Objekat u json formatu</returns>
        </member>
        <member name="M:napredne_projekat.Services.DepartmentService.FromJson(System.String)">
            <summary>
            Metoda koja deserijalizuje json u objekat
            </summary>
            <param name="json">Json objekat kao string</param>
            <returns>Objekat kao Department</returns>
        </member>
        <member name="T:napredne_projekat.Services.StudentService">
            <summary>
            Klasa koja nam sluzi za kao serivis iz koga se pozivaju operacije nad tabelom student u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Services.StudentService.#ctor(napredne_projekat.Repository.unit_of_work.IUnitOfWork)">
            <summary>
            Parametrizovani konstrukor koji kreira objekat klase StudentService i postavlja vrednost za uow
            </summary>
            <param name="uow">Objekat klase UnitOfWork</param>
        </member>
        <member name="M:napredne_projekat.Services.StudentService.GetAll">
            <summary>
            Metoda koja poziva UnitOfWork i vraca listu svih studenata
            </summary>
            <returns>Lista svih studenata</returns>
        </member>
        <member name="M:napredne_projekat.Services.StudentService.AddStudent(napredne_projekat.Domain.Student)">
            <summary>
            Metoda koja poziva UnitOfWork da doda studetna  i vraca tog studetna
            </summary>
            <param name="item">Objekat klase Student</param>
            <returns>Objekat klase Student koji je dodat</returns>
            <exception cref="T:napredne_projekat.Exeptions.cs.AlreadyExistsException" />
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="M:napredne_projekat.Services.StudentService.FindById(System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork i vraca studenta za prosledjenim id-jem
            </summary>
            <param name="id">Id studenta kao Int</param>
            <returns>Objekat klase Student koji ima dati id</returns>
        </member>
        <member name="M:napredne_projekat.Services.StudentService.GetByGrade(System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork da vrati sve studente sa ocenom vecom od prosledjene
            </summary>
            <param name="grade">Ocena studenta kao Int</param>
            <returns>Lista studenata koji imaju ocenu vecu od prosledjene</returns>
        </member>
        <member name="M:napredne_projekat.Services.StudentService.UpdateStudent(System.Int32,napredne_projekat.Domain.Student)">
            <summary>
            Metoda koja poziva UnitOfWork da update-uje studenta i vrati ga nazad
            </summary>
            <param name="id">Id studenta kao int</param>
            <param name="student">Objekat klase student</param>
            <returns>Objekat klase student</returns>
            <exception cref="T:System.NullReferenceException" />
            <exception cref="T:System.ArgumentException" />
        </member>
        <member name="T:napredne_projekat.Services.SubjectService">
            <summary>
            Klasa koja nam sluzi za kao serivis iz koga se pozivaju operacije nad tabelom subjects u bazi
            </summary>
        </member>
        <member name="M:napredne_projekat.Services.SubjectService.#ctor(napredne_projekat.Repository.unit_of_work.IUnitOfWork)">
            <summary>
            Parametrizovani konstrukor koji kreira objekat klase SubjectService i postavlja vrednost za uow
            </summary>
            <param name="uow">Objekat klase UnitOfWork</param>
        </member>
        <member name="M:napredne_projekat.Services.SubjectService.GetAll">
            <summary>
            Metoda koja poziva UnitOfWork i vraca listu svih predmeta
            </summary>
            <returns>Lista svih predmeta</returns>
        </member>
        <member name="M:napredne_projekat.Services.SubjectService.FindById(System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork i vraca predmet za prosledjenim id-jem
            </summary>
            <param name="id">Id predmeta kao Int</param>
            <returns>Objekat klase Subject koji ima dati id</returns>
        </member>
        <member name="M:napredne_projekat.Services.SubjectService.UpdateSubject(napredne_projekat.Domain.Subject,System.Int32)">
            <summary>
            Metoda koja poziva UnitOfWork da update-uje predmet sa prosledjenim id-jem i vraca taj predet
            </summary>
            <param name="subject">Objekat klase Subject sa novim podacima</param>
            <param name="id">Id predmeta koji treba da se update-uje kao Int</param>
            <returns>Objekat klase Subject koji je update-ovan</returns>
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="M:napredne_projekat.Services.SubjectService.AddSubject(napredne_projekat.Domain.Subject)">
            <summary>
            Metoda koja poziva UnitOfWork da doda predmet  i vraca taj predet
            </summary>
            <param name="subject">Objekat klase Subject</param>
            <returns>Objekat klase Subject koji je dodat</returns>
            <exception cref="T:napredne_projekat.Exeptions.cs.AlreadyExistsException" />
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="M:napredne_projekat.Services.SubjectService.FindOneByCondition(System.Linq.Expressions.Expression{System.Func{napredne_projekat.Domain.Subject,System.Boolean}})">
            <summary>
            Metoda koja poziva UnitOfWork da vrati predmet koji zadovoljava uslov
            </summary>
            <param name="func">Uslov kao lambda izraz</param>
            <returns>Objekat klase Subject koji zadovoljava uslov</returns>
        </member>
        <member name="T:napredne_projekat.Startup">
            <summary>
            Klasa za konfiguraciju aplikacije, odnosno dodavnje servisa i definisanje pipline-a
            </summary>
        </member>
        <member name="M:napredne_projekat.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Konstruktor za klasu Startup joja prima parametar configuartion
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:napredne_projekat.Startup.Configuration">
            <summary>
            Properti koji predstavlja konfiguraciju aplikacije
            </summary>
        </member>
        <member name="M:napredne_projekat.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Metoda koja nam sluzi za dodavanje servisa u kontejnjere
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:napredne_projekat.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Metoda koja nam sluzi za definisanje pipeline-a
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:napredne_projekat.Validation.DepartmentNameValidation">
            <summary>
            Klasa koja nam sluzi za validaciju naziva katedre
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.DepartmentNameValidation.IsValid(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="T:napredne_projekat.Validation.EspbValidation">
            <summary>
            Klasa koja nam sluzi za validaciju espb-a
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.EspbValidation.IsValid(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:napredne_projekat.Validation.GradeValidation">
            <summary>
            Klasa koja nam sluzi za validaciju ocene studenata
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.GradeValidation.IsValid(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:napredne_projekat.Validation.IdValidation">
            <summary>
            Klasa koja nam sluzi za validaciju Id-a
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.IdValidation.IsValid(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="T:napredne_projekat.Validation.IndexValidation">
            <summary>
            Klasa koja nam sluzi za validaciju formata indexa
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.IndexValidation.IsValid(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:napredne_projekat.Validation.NameValidation">
            <summary>
            Klasa koja nam sluzi za validaciju naziva
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.NameValidation.IsValid(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NullReferenceException" />
        </member>
        <member name="T:napredne_projekat.Validation.SizeValidation">
            <summary>
            Klasa koja nam sluzi za validaciju velicine katedre
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.SizeValidation.IsValid(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:napredne_projekat.Validation.YearOfBirthValidation">
            <summary>
            Klasa koja nam sluzi za validaciju godine rodjenja
            </summary>
        </member>
        <member name="M:napredne_projekat.Validation.YearOfBirthValidation.IsValid(System.Object)">
            <inheritdoc/>
            <exception cref="T:System.NullReferenceException" />
        </member>
    </members>
</doc>
